Name: Matthew Wong
Date: 5 March 2024
Time: 2 hr
Help: Liam (TA)

;; Puzzle 1: Producer-Consumer

    ;; SHARED MEMORY 
    1   buffer = ... // Place holder
    2   mutex  = Semaphore(1)
    3   items  = Semaphore(0)

    ;; PRODUCER THREAD 
    1   local event = waitForEvent() 
    2   mutex.wait()
    3   buffer.add(event) 
    4   mutex.signal()
    5   items.signal()

    ;; CONSUMER THREAD 
    1   items.wait()
    2   mutex.wait() 
    3   local event = buffer.get() 
    4   mutex.signal()
    5   event.process() 


    ;; EXPLANATION 
        The producer thread waits for an event to occur, then it attempts to 
    acquire the lock for the buffer (mutex) so it can put something in the 
    buffer, then alerts a consumer thread that the buffer has updated, so the 
    consumer can attempt to try to acquire what is in the buffer. 
        The consumer first tries to wait for an item. If there are no items, 
    then the thread will go to sleep. Since there is exactly one thread awoken
    or let through by the signal from the producer, that thread will first 
    wait for the item, "reserving" the item from the buffer (as it decrements
    the number of items in the queue), then works on that item. The consumer 
    aquires from the buffer using the mutex, before releasing it so that 
    other threads can try to get stuff from the buffer before starting to 
    process the item. Note that since items are signaled only when something 
    is added to the buffer, and only one thread waiting (which are consumers)
    are woken up by the signal, buffer.get() won't get called unless the 
    buffer has stuff. 

;; Puzzle 2: Finite Buffer Producer-Consumer

    ;; SHARED MEMORY 
    1   buffer     = ... // Place holder
    2   bufferSize = ... // Place holder
    3   mutex      = Semaphore(1)
    4   items      = Semaphore(0)
    5   spaces     = Semaphore(bufferSize)

    ;; PRODUCER THREAD 
    1   local event = waitForEvent() 
    2   spaces.wait()
    3   mutex.wait()
    4   buffer.add(event) 
    5   mutex.signal()
    6   items.signal()

    ;; CONSUMER THREAD
    1   items.wait()
    2   mutex.wait()  
    3   local event = buffer.get() 
    4   mutex.signal()
    5   spaces.signal()
    6   event.process() 

    ;; EXPLANATION 
        The producer thread first tries to "reserve" a space on the buffer 
    by calling spaces.wait(). If there is no space, it will wait until a 
    consumer signals that thread that it has added something to the queue. 
    Since the signal only wakes up one thread, it will only let one waiting 
    producer produces, and take up their reserved spot. 
        The consumer works the same as above, where they will try to "reserve"
    an item in the buffer if there is one, otherwise wait. Then, at the end
    it will also signal spaces to let one producer know that there is space 
    in the buffer for it to produce.